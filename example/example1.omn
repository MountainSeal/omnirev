type qubit = I + I

expr not : qubit -> qubit =
  inl unit => inr unit
| inr unit => inl unit

expr cnot : (qubit*qubit) -> (qubit*qubit) =
  inl unit, inl unit => inl unit, inl unit
| inl unit, inr unit => inl unit, inr unit
| inr unit, inl unit => inr unit, inr unit
| inr unit, inr unit => inr unit, inl unit

type nat = fix X. (I + X)

expr add : (nat * nat) -> (nat * nat) =
  x, y                            => iter (y, fold(nat) inl unit, x)
| iter (a, b, fold(nat) inl unit) => a, b
| iter (a, b, fold(nat) inr n)    => iter (fold(nat) inr a, fold(nat) inr b, n)
  where iter : nat * nat * nat