type qubit = unit + unit
type octet = qubit * qubit * qubit * qubit * qubit * qubit * qubit * qubit

// 関数(同型射)の例

// 恒等関数
func fid : unit <-> unit = id
func ftensor : unit * unit <-> unit * unit = id * id
func ftensunit : (qubit * unit) <-> qubit = unit_*
func ftensassoc : (qubit * (qubit * qubit)) <-> ((qubit * qubit) * qubit) = assoc_*
func ftenssym : (unit * qubit) <-> (qubit * unit) = sym_*
func fsum : unit + unit <-> unit + unit = id + id
func fsumassoc : (qubit + (qubit + qubit)) <-> (qubit + (qubit + qubit)) = assoc_+
func fsumsym : (qubit + unit) <-> (unit + qubit) = sym_+
func fdistrib : ((unit + qubit) * octet) <-> (unit * octet) + (qubit * octet) = distrib
func feval : qubit * ~qubit <-> unit = (eval qubit)
func fvar : (unit + unit) <-> (unit + unit) = fsum
func fcomp : ((unit + qubit) * octet) <-> (unit * octet) + (octet * qubit) = distrib;(id + sym_*)
func fdagger : (unit * octet) + (octet * qubit) <-> ((unit + qubit) * octet) = ^(distrib;(id + sym_*))
func fshift : octet <-> octet = shift 45