-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import Control.Monad (when)

import Omnirev.LexOmnirev
import Omnirev.ParOmnirev
import Omnirev.PrintOmnirev
import Omnirev.AbsOmnirev
import Omnirev.EvalOmnirev




import Omnirev.ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= runParse v p

runParse :: (Print a, Show a) => Verbosity -> ParseFun a -> String -> IO ()
runParse v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
                          exitFailure
           Ok  tree -> do putStrLn "\nParse Successful!"
                          showTree v tree

                          exitSuccess

runCheckFile :: Verbosity -> ParseFun Program -> FilePath -> IO ()
runCheckFile v p f = putStrLn f >> readFile f >>= runCheck v p

runCheck :: Verbosity -> ParseFun Program -> String -> IO ()
runCheck v p s = let ts = myLLexer s in case p ts of
  Bad s   -> do
    putStrLn "\nParse              Failed...\n"
    putStrV v "Tokens:"
    putStrV v $ show ts
    putStrLn  s
    exitFailure
  Ok tree -> do
    putStrLn "\nParse Successful!"
    case check tree of
      Bad s -> do
        putStrLn "\nCheck              Failed...\n"
        exitFailure
      Ok (s,logs) -> do
        putStrLn $ unlines logs
        exitSuccess 
      

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    , "  -c (files)      Check type of files."
    , "  -e (files)      Evaluate of files."
    , "  -v             Output version information."
    ]
  exitFailure

version :: IO ()
version = do
  putStrLn "omnirev-0.4.0"
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> getContents >>= runParse 2 pProgram
    "-c":fs -> mapM_ (runCheckFile 2 pProgram) fs
    "-s":fs -> mapM_ (runFile 0 pProgram) fs
    ["-v"] -> version
    fs -> mapM_ (runFile 2 pProgram) fs
