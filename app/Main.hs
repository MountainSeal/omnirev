{-# LANGUAGE ApplicativeDo   #-}
{-# LANGUAGE RecordWildCards #-}
-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import Control.Monad (when)
import Options.Applicative
import Data.Semigroup ((<>))

import Omnirev.LexOmnirev
import Omnirev.ParOmnirev
import Omnirev.PrintOmnirev
import Omnirev.AbsOmnirev
import Omnirev.CheckOmnirev
import Omnirev.EvalOmnirev




import Omnirev.ErrM
import Control.Monad.Writer.Strict
import qualified Data.Map as M
import Data.List (intercalate)

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= runParse v p

runParse :: (Print a, Show a) => Verbosity -> ParseFun a -> String -> IO ()
runParse v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
                          exitFailure
           Ok  tree -> do putStrLn "\nParse Successful!"
                          showTree v tree
                          exitSuccess

runCompile :: Verbosity -> ParseFun Program -> FilePath -> Bool -> Bool -> IO ()
runCompile v p f cflg eflg = do
  putStrLn f
  src <- readFile f
  let ts = myLLexer src
  case p ts of
    Bad s -> do
      putStrLn "\nParse              Failed...\n"
      putStrV v "Tokens:"
      putStrV v $ show ts
      putStrLn  s
      exitFailure
    Ok tree -> do
      putStrLn "\nParse Successful!"
      showTree v tree
      if not cflg then exitSuccess
      else case check tree of
        Bad s -> do
          putStrLn s
          putStrLn "\nType Check         Failed...\n"
          exitFailure
        Ok (env, clog) -> do
          putStrLn "\nCheck Successful!"
          -- putStrLn $ unlines clog
          if not eflg then exitSuccess
          else case eval env of
            Bad err -> do
              putStrLn err
              putStrLn "\nEval               Failed...\n"
              exitFailure
            Ok (res,elog) -> do
              putStrLn "\nEval Successful!"
              putStrLn $ unlines elog
              exitSuccess

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    , "  -c (files)      Check type of files."
    , "  -e (files)      Evaluate of files."
    , "  -v             Output version information."
    ]
  exitFailure

main :: IO ()
main = pas =<< execParser opts
  where
    opts = info (args <**> helper) -- 常にヘルプ文出す場合はhelper使う
      (  fullDesc
      <> header "omnirev - interpreter for omnirev"
      )

pas :: Args -> IO ()
pas Version = exitFailure
pas (FileInput path cflg eflg tflg oPath) = runCompile 0 pProgram path cflg eflg
pas StdInput = getContents >>= runParse 2 pProgram

data Args
  = Version
  | StdInput
  | FileInput
    { filePath :: String
    , fcheck :: Bool
    , feval :: Bool
    , ftrace :: Bool
    , output :: Maybe FilePath
    } deriving (Read, Show)

fileInput :: Parser Args
fileInput = do
  filePath <- strArgument
    ( help "Program file"
   <> metavar "<filepath>" )
  fcheck <- switch
    ( help "Check type of files"
   <> long "check"
   <> short 'c' )
  feval <- switch
    ( help "Evaluate program of files"
   <> long "eval"
   <> short 'e' )
  ftrace <- switch
    ( help "Print trace log"
   <> long "trace"
   <> short 't' )
  output <- optional $ strOption
    ( help "Choose output directory (default current directory)"
   <> long "output"
   <> short 'o'
   <> metavar "<path>" )
  pure FileInput {..}

stdInput :: Parser Args
stdInput =
  pure StdInput

version :: Parser Args
version = do
  infoOption "0.4.0"
    ( help "Show version"
   <> long "version"
   <> short 'v' )
  pure Version

args :: Parser Args
args = fileInput <|> stdInput <|> version