-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Omnirev.ParOmnirev where
import Omnirev.AbsOmnirev as AbsOmnirev
import Omnirev.LexOmnirev
import Omnirev.ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  '()' { PT _ (TS _ 2) }
  ')' { PT _ (TS _ 3) }
  '*' { PT _ (TS _ 4) }
  '+' { PT _ (TS _ 5) }
  '.' { PT _ (TS _ 6) }
  ':' { PT _ (TS _ 7) }
  ';' { PT _ (TS _ 8) }
  '<' { PT _ (TS _ 9) }
  '<->' { PT _ (TS _ 10) }
  '=' { PT _ (TS _ 11) }
  '>' { PT _ (TS _ 12) }
  '^' { PT _ (TS _ 13) }
  'assoc*' { PT _ (TS _ 14) }
  'assoc+' { PT _ (TS _ 15) }
  'distrib' { PT _ (TS _ 16) }
  'eval' { PT _ (TS _ 17) }
  'expr' { PT _ (TS _ 18) }
  'func' { PT _ (TS _ 19) }
  'id' { PT _ (TS _ 20) }
  'left' { PT _ (TS _ 21) }
  'measure' { PT _ (TS _ 22) }
  'right' { PT _ (TS _ 23) }
  'sym*' { PT _ (TS _ 24) }
  'sym+' { PT _ (TS _ 25) }
  'type' { PT _ (TS _ 26) }
  'unit' { PT _ (TS _ 27) }
  'unit*' { PT _ (TS _ 28) }
  '¬' { PT _ (TS _ 29) }
  'µ' { PT _ (TS _ 30) }

L_ident  { PT _ (TV $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }

Program :: { Program }
Program : ListDef { AbsOmnirev.Prog $1 }
Def :: { Def }
Def : 'type' Ident '=' Type { AbsOmnirev.DType $2 $4 }
    | 'func' Ident ':' Type '<->' Type '=' Func { AbsOmnirev.DFunc $2 $4 $6 $8 }
    | 'expr' Ident ':' Type '=' Expr { AbsOmnirev.DExpr $2 $4 $6 }
ListDef :: { [Def] }
ListDef : Def { (:[]) $1 } | Def ListDef { (:) $1 $2 }
Expr3 :: { Expr }
Expr3 : '()' { AbsOmnirev.EUnit }
      | 'left' Expr3 { AbsOmnirev.ELeft $2 }
      | 'right' Expr3 { AbsOmnirev.ERight $2 }
      | '¬' Expr3 { AbsOmnirev.EStar $2 }
      | Ident { AbsOmnirev.EVar $1 }
      | '<' Expr3 '>' { AbsOmnirev.ERec $2 }
      | Func Expr3 { AbsOmnirev.EApp $1 $2 }
      | 'measure' Expr3 { AbsOmnirev.EProj $2 }
      | '(' Expr ')' { $2 }
Expr2 :: { Expr }
Expr2 : Expr2 '*' Expr3 { AbsOmnirev.ETensor $1 $3 } | Expr3 { $1 }
Expr1 :: { Expr }
Expr1 : Expr1 '+' Expr2 { AbsOmnirev.ESum $1 $3 } | Expr2 { $1 }
Expr :: { Expr }
Expr : Expr1 { $1 }
Type3 :: { Type }
Type3 : 'unit' { AbsOmnirev.TUnit }
      | '¬' Type3 { AbsOmnirev.TStar $2 }
      | Ident { AbsOmnirev.TVar $1 }
      | 'µ' Ident '.' Type { AbsOmnirev.TRec $2 $4 }
      | '(' Type ')' { $2 }
Type2 :: { Type }
Type2 : Type2 '*' Type3 { AbsOmnirev.TTensor $1 $3 } | Type3 { $1 }
Type1 :: { Type }
Type1 : Type1 '+' Type2 { AbsOmnirev.TSum $1 $3 } | Type2 { $1 }
Type :: { Type }
Type : Type1 { $1 }
Func4 :: { Func }
Func4 : 'id' { AbsOmnirev.FId }
      | 'unit*' { AbsOmnirev.FTensUnit }
      | 'assoc*' { AbsOmnirev.FTensAssoc }
      | 'sym*' { AbsOmnirev.FTensSym }
      | 'assoc+' { AbsOmnirev.FSumAssoc }
      | 'sym+' { AbsOmnirev.FSumSym }
      | 'distrib' { AbsOmnirev.FDistrib }
      | 'eval' Type { AbsOmnirev.FEval $2 }
      | '^' Func4 { AbsOmnirev.FDagger $2 }
      | Ident { AbsOmnirev.FVar $1 }
      | '(' Func ')' { $2 }
Func1 :: { Func }
Func1 : Func1 ';' Func2 { AbsOmnirev.FComp $1 $3 } | Func2 { $1 }
Func3 :: { Func }
Func3 : Func3 '*' Func4 { AbsOmnirev.FTensor $1 $3 } | Func4 { $1 }
Func2 :: { Func }
Func2 : Func2 '+' Func3 { AbsOmnirev.FSum $1 $3 } | Func3 { $1 }
Func :: { Func }
Func : Func1 { $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

