{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintOmnirev.
--   Generated by the BNF converter.

module Omnirev.PrintOmnirev where

import Omnirev.AbsOmnirev
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Ident where
  prt _ (Ident i) = doc (showString i)

instance Print Program where
  prt i e = case e of
    Prog defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print Def where
  prt i e = case e of
    DType id type_ -> prPrec i 0 (concatD [doc (showString "type"), prt 0 id, doc (showString "="), prt 0 type_])
    DTerm id type_ term -> prPrec i 0 (concatD [doc (showString "term"), prt 0 id, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 term])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Def] where
  prt = prtList

instance Print Value where
  prt i e = case e of
    VUnit d -> prPrec i 6 (concatD [doc (showString "cis"), prt 0 d, doc (showString "pi")])
    VLeft value -> prPrec i 6 (concatD [doc (showString "inl"), prt 6 value])
    VRight value -> prPrec i 6 (concatD [doc (showString "inr"), prt 6 value])
    VTensor value1 value2 -> prPrec i 5 (concatD [prt 5 value1, doc (showString "*"), prt 6 value2])
    VDual value -> prPrec i 6 (concatD [doc (showString "~"), prt 6 value])
    VFold value -> prPrec i 6 (concatD [doc (showString "fold"), prt 6 value])
    VTrace value1 value2 -> prPrec i 1 (concatD [prt 1 value1, doc (showString ","), prt 2 value2])
    VApp value1 value2 -> prPrec i 2 (concatD [prt 2 value1, prt 3 value2])
    VComp value1 value2 -> prPrec i 3 (concatD [prt 3 value1, doc (showString ";"), prt 4 value2])
    VSum value1 value2 -> prPrec i 4 (concatD [prt 4 value1, doc (showString "+"), prt 5 value2])

instance Print Term where
  prt i e = case e of
    CVar id -> prPrec i 0 (concatD [prt 0 id])
    CValue value -> prPrec i 0 (concatD [prt 0 value])
    CBang value -> prPrec i 0 (concatD [doc (showString "!"), prt 0 value])
    CMeas value -> prPrec i 0 (concatD [doc (showString "measure"), prt 0 value])
    CSkip -> prPrec i 0 (concatD [doc (showString "skip")])
    CCase term1 id1 term2 id2 term3 -> prPrec i 0 (concatD [doc (showString "case"), prt 0 term1, doc (showString "of"), doc (showString "inl"), prt 0 id1, doc (showString "to"), prt 0 term2, doc (showString "inr"), prt 0 id2, doc (showString "to"), prt 0 term3])
    CFst term -> prPrec i 0 (concatD [doc (showString "fst"), prt 0 term])
    CSnd term -> prPrec i 0 (concatD [doc (showString "snd"), prt 0 term])
    CLet id term1 term2 -> prPrec i 0 (concatD [doc (showString "let"), prt 0 id, doc (showString "be"), prt 0 term1, doc (showString "in"), prt 0 term2])
    CRec id term1 term2 -> prPrec i 0 (concatD [doc (showString "rec"), prt 0 id, doc (showString "be"), prt 0 term1, doc (showString "in"), prt 0 term2])

instance Print Type where
  prt i e = case e of
    TUnit -> prPrec i 3 (concatD [doc (showString "I")])
    TSum type_1 type_2 -> prPrec i 1 (concatD [prt 1 type_1, doc (showString "(+)"), prt 2 type_2])
    TTensor type_1 type_2 -> prPrec i 2 (concatD [prt 2 type_1, doc (showString "(*)"), prt 3 type_2])
    TDual type_ -> prPrec i 3 (concatD [doc (showString "~"), prt 3 type_])
    TInd id type_ -> prPrec i 3 (concatD [doc (showString "fix"), prt 0 id, doc (showString "."), prt 0 type_])
    TVar id -> prPrec i 3 (concatD [prt 0 id])

