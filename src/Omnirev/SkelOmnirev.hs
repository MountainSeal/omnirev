module Omnirev.SkelOmnirev where

-- Haskell module generated by the BNF converter

import Omnirev.AbsOmnirev
import Omnirev.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DType ident type_ -> failure x
  DFunc ident type_1 type_2 func -> failure x
transType :: Type -> Result
transType x = case x of
  TUnit -> failure x
  TTensor type_1 type_2 -> failure x
  TSum type_1 type_2 -> failure x
  TStar type_ -> failure x
  TVar ident -> failure x
transFunc :: Func -> Result
transFunc x = case x of
  FId -> failure x
  FComp func1 func2 -> failure x
  FTensor func1 func2 -> failure x
  FTensUnit -> failure x
  FTensAssoc -> failure x
  FTensSym -> failure x
  FSum func1 func2 -> failure x
  FSumAssoc -> failure x
  FSumSym -> failure x
  FDistrib -> failure x
  FEval type_ -> failure x
  FDagger func -> failure x
  FVar ident -> failure x
  FShift integer -> failure x

