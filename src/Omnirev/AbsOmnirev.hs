

module Omnirev.AbsOmnirev where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Prog [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DType Ident Type | DTerm Ident Type Term
  deriving (Eq, Ord, Show, Read)

data Value
    = VUnit Double
    | VLeft Value
    | VRight Value
    | VTensor Value Value
    | VDual Value
    | VFold Value
    | VTrace Value Value
    | VApp Value Value
    | VComp Value Value
    | VSum Value Value
  deriving (Eq, Ord, Show, Read)

data Term
    = CVar Ident
    | CValue Value
    | CBang Value
    | CMeas Value
    | CSkip
    | CCase Term Ident Term Ident Term
    | CFst Term
    | CSnd Term
    | CLet Ident Term Term
    | CRec Ident Term Term
  deriving (Eq, Ord, Show, Read)

data Type
    = TUnit
    | TSum Type Type
    | TTensor Type Type
    | TDual Type
    | TInd Ident Type
    | TVar Ident
  deriving (Eq, Ord, Show, Read)

