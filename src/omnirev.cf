--Entire Program
Prog . Program ::= [Def] ;
entrypoints Program ;
comment "//" ;
comment "/*" "*/" ;

--Definition
DType . Def ::= "type" Ident "=" Type ;
DTerm . Def ::= "term" Ident ":" Type "=" Term ;
(:[]) . [Def] ::= Def ;
(:)   . [Def] ::= Def [Def] ;

--(Quantum) Value
VUnit   . Value6 ::= "cis" Double "pi" ;
VLeft   . Value6 ::= "inl" Value6 ;
VRight  . Value6 ::= "inr" Value6 ;
VTensor . Value5 ::= Value5 "*" Value6 ;
VDual   . Value6 ::= "~" Value6 ;
VFold   . Value6 ::= "fold" Value6 ;
VTrace  . Value1 ::= Value1 "," Value2 ;
VApp    . Value2 ::= Value2 Value3 ;
VComp   . Value3 ::= Value3 ";" Value4 ;
VSum    . Value4 ::= Value4 "+" Value5 ;
coercions Value 5 ;

--(Classical) Term
CVar   . Term ::= Ident ;
CValue . Term ::= Value ;
CBang  . Term ::= "!" Value ;
CMeas  . Term ::= "measure" Value ;
CSkip  . Term ::= "skip" ;
CCase  . Term ::= "case" Term "of" "inl" Ident "to" Term "inr" Ident "to" Term ;
CFst   . Term ::= "fst" Term ;
CSnd   . Term ::= "snd" Term ;
CLet   . Term ::= "let" Ident "be" Term "in" Term ;
-- letで定義した変数に束縛される値は再利用可能とする
CRec   . Term ::= "rec" Ident "be" Term ;
-- 定義されたTermは束縛している変数を使える

--Type
TUnit   . Type3 ::= "I" ;
TSum    . Type1 ::= Type1 "(+)" Type2 ;
TTensor . Type2 ::= Type2 "(*)" Type3 ;
TDual   . Type3 ::= "~" Type3 ;
TInd    . Type3 ::= "fix" Ident "." Type ;
TVar    . Type3 ::= Ident ;
coercions Type 3 ;