--Entire Program
Prog . Program ::= [Def] ;
entrypoints Program ;
comment "//" ;
comment "/*" "*/" ;

--Definition
DType . Def ::= "type" Ident "=" Type ;
DExpr . Def ::= "expr" Ident ":" Type "=" Expr ;
(:[]) . [Def] ::= Def ;
(:)   . [Def] ::= Def [Def] ;

--Value
-VUnit   . Value2 ::= "cis" Double "π" ;
-VLeft   . Value2 ::= "inl" Value2 ;
-VRight  . Value2 ::= "inr" Value2 ;
-VTensor . Value1 ::= Value1 "*" Value2 ;
-VDual   . Value2 ::= "~" Value2 ;
-VFold   . Value2 ::= "fold" Value2 ;
-coercions Value 2 ;

--Expression
EUnit   . Expr5 ::= "cis" Double "π" ;
ELeft   . Expr5 ::= "inl" Expr5 ;
ERight  . Expr5 ::= "inr" Expr5 ;
ETensor . Expr4 ::= Expr4 "*" Expr5 ;
EDual   . Expr5 ::= "~" Expr5 ;
EFold   . Expr5 ::= "fold" Expr5 ;
EShift  . Expr5 ::= "cis" Double "π" Expr5 ;
EDot    . Expr1 ::= Expr1 "," Expr2 ;
EApp    . Expr2 ::= Expr2 ";" Expr3 ;
ESum    . Expr3 ::= Expr3 "+" Expr4 ;
coercions Expr 5 ;

--Type
TUnit   . Type3 ::= "I" ;
TSum    . Type1 ::= Type1 "(+)" Type2 ;
TTensor . Type2 ::= Type2 "(*)" Type3 ;
TDual   . Type3 ::= "~" Type3 ;
TInd    . Type3 ::= "fix" Ident "." Type ;
TVar    . Type3 ::= Ident ;
coercions Type 3 ;