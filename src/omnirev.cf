--Entire Program
Prog . Program ::= [Def] ;
entrypoints Program ;
comment "//" ;
comment "/*" "*/" ;

--Definition
DType . Def ::= "type" Ident "=" Type ;
DExpr . Def ::= "expr" Ident ":" Type "=" Expr ;
DTerm . Def ::= "term" Ident ":" Type "=" Term ;
(:[]) . [Def] ::= Def ;
(:)   . [Def] ::= Def [Def] ;

--Type
TyVar    . Type4 ::= Ident ;
TyUnit   . Type4 ::= "I" ;
TySum    . Type2 ::= Type2 "+" Type3 ;
TyTensor . Type3 ::= Type3 "*" Type4 ;
TyFunc   . Type1 ::= Type1 "->" Type2 ;
TyRec    . Type4 ::= "rec" Ident "." Type4 ;
coercions Type 4 ;

--Term
TmVar    . Term5 ::= Ident ;
TmUnit   . Term5 ::= "unit" ;
TmLeft   . Term5 ::= "inl" Term5 ;
TmRight  . Term5 ::= "inr" Term5 ;
TmTensor . Term4 ::= Term4 "," Term5 ;
TmArrow  . Term3 ::= Term3 "=>" Term4 ;
TmFold   . Term5 ::= "fold" "[" Type "]" Term5 ;
TmLin    . Term2 ::= Term2 "|" Term3 ;
TmTrace  . Term5 ::= "trace" "[" Type "]" Term5 ;
TmComp   . Term1 ::= Term1 ";" Term2 ;
TmFlip   . Term5 ::= "~" Term5 ;
TmEmpty  . Term5 ::= "empty" ;
TmId     . Term5 ::= "id" ;
coercions Term 5 ;

--Expr
ExTerm  . Expr ::= Term ;
ExApp   . Expr ::= Expr "@" Term ;