--Entire Program
Prog . Program ::= [Def] ;
entrypoints Program ;
comment "//" ;
comment "/*" "*/" ;

--Definition
DType . Def ::= "type" Ident "=" Type ;
DExpr . Def ::= "expr" Ident ":" Type "=" Expr ;
DTerm . Def ::= "term" Ident ":" Type "=" Term ;
(:[]) . [Def] ::= Def ;
(:)   . [Def] ::= Def [Def] ;

--Type
TyVar    . Type4 ::= Ident ;
TyUnit   . Type4 ::= "I" ;
TySum    . Type2 ::= Type2 "+" Type3 ;
TyTensor . Type3 ::= Type3 "*" Type4 ;
TyFunc   . Type1 ::= Type1 "->" Type2 ;
TyRec    . Type4 ::= "fix" Ident "." Type4 ;
coercions Type 4 ;

--Term
TmVar    . Term4 ::= Ident ;
TmUnit   . Term4 ::= "unit" ;
TmLeft   . Term4 ::= "inl" Term4 ;
TmRight  . Term4 ::= "inr" Term4 ;
TmTensor . Term3 ::= Term3 "," Term4 ;
TmArrow  . Term2 ::= Term2 "=>" Term3 ;
TmFold   . Term4 ::= "fold" Type Term4 ;
TmLin    . Term1 ::= Term1 "|" Term2 ;
TmOpp    . Term4 ::= "-" Term4 ;
-- TmLabel  . Term4 ::= Ident Term4 ;
TmTrace  . Term4 ::= Term4 "trace" Type ;
coercions Term 4 ;

--Expr
ExTerm  . Expr1 ::= Term ;
ExApp   . Expr1 ::= Expr1 "@" Expr1 ;
-- ExComp  . Expr1 ::= Expr1 ";" Expr2 ;
ExFlip  . Expr1 ::= "~" Expr1 ;
coercions Expr 1 ;